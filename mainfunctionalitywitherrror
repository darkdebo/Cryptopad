import sys
import os
from PyQt5.QtWidgets import QMainWindow, QApplication, QPushButton, QWidget, QAction, QTabWidget,QVBoxLayout,QTextEdit
from PyQt5.QtGui import QIcon
from PyQt5.QtCore import pyqtSlot

class App(QMainWindow):

    def __init__(self):
        super().__init__()
        self.title = 'CRYPTOPad'
        self.left = 0
        self.top = 0
        self.width = 300
        self.height = 200
        self.setWindowTitle(self.title)
        self.statusBar().showMessage("Welcome to cryptopad")
        
        
        
        #open a new file
        openAct = QAction(QIcon('food.png'), '&open', self)        
        openAct.setShortcut('Ctrl+O')
        openAct.setStatusTip('open a new file')
        
        #save a new file
        saveact=QAction(QIcon("save.png"),"&save",self)
        saveact.setShortcut('Ctrl+s')
        saveact.setStatusTip("save your file")

        #encrypt your file
        encryptact=QAction(QIcon("encrypt.png"),"&encrypt",self)
        encryptact.setShortcut('Ctrl+e')
        encryptact.setStatusTip("encrypt your file")

        #decrypt your file
        decryptact=QAction(QIcon("decrypt.png"),"&decrypt",self)
        decryptact.setShortcut('Ctrl+d')
        decryptact.setStatusTip("decrypt your file")
          
        #delete your file
        deleteact=QAction(QIcon("delete.png"),'&delete',self)
        deleteact.setShortcut("Ctrl+d")
        deleteact.setStatusTip("delete your file")  
        deleteact.triggered.connect(os.remove())
        #close your file
        closeact=QAction(QIcon('close.png'),"&close",self)
        closeact.setShortcut('Ctrl+c')
        closeact.setStatusTip('close your file')
        closeact.triggered.connect(self.close)


        self.statusBar()

        menubar = self.menuBar()
        fileMenu = menubar.addMenu('&File')
        saveMenu=menubar.addMenu('&save')
        encryptMenu=menubar.addMenu('&encrypt')
        deleteMenu=menubar.addMenu('&delete')
        closemenu=menubar.addMenu('&close')
        decryptmenu=menubar.addMenu('&decrypt')

        fileMenu.addAction(openAct)
        saveMenu.addAction(saveact)
        encryptMenu.addAction(encryptact)
        deleteMenu.addAction(deleteact)
        closemenu.addAction(closeact)
        decryptmenu.addAction(decryptact)
        
        #textfield
        textEdit = QTextEdit()
        self.setCentralWidget(textEdit)

        self.setGeometry(self.left, self.top, self.width, self.height)
        self.show()
    
    def encrypt(self, parameter_list):
        pass

    def decrypt(self):
        pass

    def __quitApplication(self): 
	    self.__root.destroy() 
	# exit() 

    def __showAbout(self): 
	    showinfo("Notepad", "Mrinal Verma") 

    def __openFile(self): 
		
	    self.__file = askopenfilename(defaultextension=".txt", 
								filetypes=[("All Files","*.*"), 
									("Text Documents","*.txt")]) 

	    if self.__file == "": 

		# no file to open 
		    self.__file = None
	    else: 
		# try to open the file 
		# set the window title 
		    self.__root.title(os.path.basename(self.__file) + " - Notepad") 
		    self.__thisTextArea.delete(1.0,END) 

		    file = open(self.__file,"r") 

		    self.__thisTextArea.insert(1.0,file.read()) 

		    file.close() 

		
    def __newFile(self): 
	    self.__root.title("Untitled - Notepad") 
	    self.__file = None
	    self.__thisTextArea.delete(1.0,END) 

    def __saveFile(self): 

	    if self.__file == None: 
		#save as new file 
		    self.__file = asksaveasfilename(initialfile='Untitled.txt', 
										defaultextension=".txt", 
										filetypes=[("All Files","*.*"), 
											("Text Documents","*.txt")]) 

		    if self.__file == "": 
			    self.__file = None
		    else: 
			
			# try to save the file 
			    file = open(self.__file,"w") 
			    file.write(self.__thisTextArea.get(1.0,END)) 
			    file.close() 
			# change the window title 
			    self.__root.title(os.path.basename(self.__file) + " - Notepad") 
				
			
	    else: 
		    file = open(self.__file,"w") 
		    file.write(self.__thisTextArea.get(1.0,END)) 
		    file.close() 

    def __cut(self): 
	    self.__thisTextArea.event_generate("<<Cut>>") 

    def __copy(self): 
	    self.__thisTextArea.event_generate("<<Copy>>") 

    def __paste(self): 
	    self.__thisTextArea.event_generate("<<Paste>>") 


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = App()
    sys.exit(app.exec_())
